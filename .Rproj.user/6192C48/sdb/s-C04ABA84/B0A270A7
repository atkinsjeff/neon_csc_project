{
    "collab_server" : "",
    "contents" : "\n# Required packages\nrequire(broom)\nrequire(ggplot2)\nrequire(nls2)\nrequire(MuMIn)\n####### Data import section for plot level analysis\n#Data import\n# plot.fpar <- read.csv(\"laserquest_master_fpar_plot.csv\")\n# \n# # designate light regime based on aPAR or above canopy PAR\n# plot.fpar$regime <- ifelse(plot.fpar$aPAR_mean >= 1000, \"high\",\n#                            \"low\")\n# \n# plot.fpar$regime <- as.factor(plot.fpar$regime)\n# \n# ### Modeling section\n# #Subset data for modelling\n\n# high <- subset(plot.fpar, aPAR_mean >= 1000)\n# low <- subset(plot.fpar, aPAR_mean < 1000)\n# \n# # Define x and y for script\n\n#########################################\n##### canopy rugosity\n\ny <- high$fPAR_mean\nx <- high$rugosity_mean\n\n# y <- low$fPAR_mean\n# x <- low$mean.vai_mean\n# ###### Data import section for site level analysis\n# x <- master.site$deep.gaps_mean\n# y <- master.site$fPAR_mean\n# \n# #w/o OSBS\n# x <- subset(master.site$mean.max.ht_mean, master.site$site != \"OSBS\")\n# y <- subset(master.site$fPAR_mean, master.site$site != \"OSBS\")\n# \nplot(x, y)\n\nx.label <- \"Rc\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rc <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = -1, b = -1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = 1, b = -1, c = -1))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 0.5, b = 0.5))\nlog.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b =1, k = 1) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = -1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n# \n\nggplot(df, aes(x = x, y = y))+\n     geom_point()+\n     geom_smooth(method = \"nls\", \n                 formula = y ~ (a * x) / (b + x),\n                 method.args = list(start = list(a = 1 , b = 1)),\n                 se = FALSE,\n                 color = \"blue\")+\n     geom_smooth(method = \"nls\",\n                 formula = y ~ (1 / (1 + exp(-a * (x - b)))),\n                 method.args = list(start = list(a = -0.011 , b = 1)),\n                 se = FALSE,\n                 color = \"dark green\")+\n     geom_smooth(method = \"nls\",\n                 formula = y ~ a + (b * x) / (c + x),\n                 method.args = list(start = list(a = 1, b = -0.1, c = -1)),\n                 se = FALSE,\n                 color = \"purple\")+\n     geom_smooth(method = \"lm\", se = FALSE, color = \"red\")+\n     geom_smooth(method = \"nls\",\n                 formula = y ~ (a * (x^b)),\n                 method.args = list(start = list(a = 1, b = 1)),\n                 se = FALSE,\n                 color = \"yellow\")+\n     theme_classic()+\n     xlab(x.label)+\n     ylab(y.label)\n\n     geom_line(data = df, aes(x = x, y = predict(linear.model), color = \"LinearModel\"), size = 1.25)+\n     geom_line(aes(x = x, y = predict(rec.hyper), color = \"RecHyper\"), size = 1.25)+\n     geom_line(aes(x = x, y = predict(rec.hyper2), color = \"RecHyper2\"), size = 1.25)+\n     geom_line(aes(x = x, y = predict(sigmoidal.curve), color = \"Sigmoid\"), size = 1.25)+\n     geom_line(aes(x = x, y = predict(log.growth), color = \"LogGrowth\"), size = 1.25)+\n     geom_line(aes(x = x, y = predict(logarithmic), color = \"Logarithmic\"), size = 1.25)+\n     scale_color_manual(name = \"Line Color\",\n                        values = c(LinearModel = \"red\", RecHyper = \"blue\", RecHyper2 = \"purple\", Sigmoid = \"dark green\",\n                                   LogGrowth = \"green\", Logarithmic = \"orange\"))+\n     theme_classic()+\n     xlab(x.label)+\n     ylab(y.label)\n# \n# \n\n\n\n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2, sigmoidal.curve, log.growth, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rectangular hyperbola 2\", \"sigmoidal curve\",  \"log growth\", \"logarithmic\", \"power\", \"log\")\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n\n     #R squared\n     RSS <- sum(residuals(model.list[[name]])^2)\n     TSS <- sum((y - mean(y))^2)\n     r2 = 1 - (RSS/TSS)\n     print(name)\n     print(r2)\n}\n\n#####################################################\n##### TOP RUGOSITY\n##### \n\n\ny <- high$fPAR_mean\nx <- high$top.rugosity_mean\n\nplot(x, y)\n\nx.label <- \"Rt\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = -1, b = -1))\n#rec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = 1, b = -1, c = 3))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 0.5, b = 0.5))\n#log.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b =1, k = 1) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = -1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n# \n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, sigmoidal.curve, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"sigmoidal curve\", \"logarithmic\", \"power\", \"log\")\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n#create model output date frame first\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n\n####################################################################\n##### Canopy Porosity\ny <- high$fPAR_mean\nx <- high$porosity_mean\n\nplot(x, y)\n\nx.label <- \"Rt\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = 1, b = 1, c = 11))\n#sigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = -1, b = -0.5))\n#log.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b =1, k = 1) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = -1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\", \"logarithmic\", \"power\", \"log\")\n\n# reorganizes\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n\n\n###############################\n\n##### Rumple\ny <- high$fPAR_mean\nx <- high$rumple_mean\n\nplot(x, y)\n\nx.label <- \"Rt\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = 1, b = 0.1, c = -1))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 1, b = 1))\n#log.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b =0.1, k = -1) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = -1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n# \n# \n\nggplot(df, aes(x = x, y = y))+\n  geom_point()+\n  geom_smooth(method = \"nls\", \n              formula = y ~ (a * x) / (b + x),\n              method.args = list(start = list(a = 1 , b = 1)),\n              se = FALSE,\n              color = \"blue\")+\n  geom_smooth(method = \"nls\",\n              formula = y ~ a + (b * x) / (c + x),\n              method.args = list(start = list(a = 1, b = -0.1, c = -1)),\n              se = FALSE,\n              color = \"purple\")+\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\")+\n  geom_smooth(method = \"nls\",\n              formula = y ~ (a * (x^b)),\n              method.args = list(start = list(a = 1, b = 1)),\n              se = FALSE,\n              color = \"yellow\")+\n  theme_classic()+\n  xlab(x.label)+\n  ylab(y.label)\n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2, sigmoidal.curve, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\", \"s curve\", \"logarithmic\", \"power\", \"log\")\n\n# reorganizes\nmodel.output$model.name <- model.names\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  \n  #model Name\n \n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n\n\n###############################\n\n##### VAI\ny <- high$fPAR_mean\nx <- high$mean.vai_mean\n\nplot(x, y)\n\nx.label <- \"VAI\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = 1, b = 3, c = -1))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 1, b = 1))\nlog.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b =-1, k = 0.1) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = -1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n# \n# \n\nggplot(df, aes(x = x, y = y))+\n  geom_point()+\n  geom_smooth(method = \"nls\", \n              formula = y ~ (a * x) / (b + x),\n              method.args = list(start = list(a = 1 , b = 1)),\n              se = FALSE,\n              color = \"blue\")+\n  geom_smooth(method = \"nls\",\n              formula = y ~ a + (b * x) / (c + x),\n              method.args = list(start = list(a = 1, b = -0.1, c = -1)),\n              se = FALSE,\n              color = \"purple\")+\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\")+\n  geom_smooth(method = \"nls\",\n              formula = y ~ (a * (x^b)),\n              method.args = list(start = list(a = 1, b = 1)),\n              se = FALSE,\n              color = \"yellow\")+\n  theme_classic()+\n  xlab(x.label)+\n  ylab(y.label)\n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2, sigmoidal.curve, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\", \"s curve\", \"logarithmic\", \"power\", \"log\")\n\n# reorganizes\nmodel.output$model.name <- model.names\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  \n  #model Name\n  \n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n\n#####################################################\n\n##### MOCH\ny <- high$fPAR_mean\nx <- high$mean.max.ht_mean\n\nplot(x, y)\n\nx.label <- \"VAI\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = 0.1, b = 0.1, c = 25))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 0.5, b = 0.5))\nlog.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b =1, k = 0.1) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = -1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n# \n# \n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2,  sigmoidal.curve, log.growth, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\", \"s curve\", \"log growth\",\"logarithmic\", \"power\", \"log\")\n\n# reorganizes\nmodel.output$model.name <- model.names\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  \n  #model Name\n  \n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n#####################################################\n\n##### deep gap fraction\ny <- high$fPAR_mean\nx <- high$deep.gap.fraction_mean\n\nplot(x, y)\n\nx.label <- \"VAI\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = -0.01, b = 0.1, c = 1))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 0.5, b = 0.5))\n#log.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = -1, b = 10.5, k = 0.01) )\n#logarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = 1, b = 1))\n#power               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\n#log                 <- lm(y ~ log(x))\n\n# \n# \n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2,  sigmoidal.curve)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\",\"s curve\")\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  \n  #model Name\n  \n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n#####################################################\n\n##### gap fraction\ny <- high$fPAR_mean\nx <- high$sky.fraction_mean\n\nplot(x, y)\n\nx.label <- \"VAI\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = -0.01, b = 0.1, c = 1))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = -0.1, b = 0.5))\n#log.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = -1, b = 10.5, k = 0.01) )\n#logarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = 1, b = 1))\n#power               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\n#log                 <- lm(y ~ log(x))\n\n# \n# \n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2,  sigmoidal.curve)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\",\"s curve\")\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  \n  #model Name\n  \n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n\n#####################################################\n\n#####  CLUMPING INDEX\ny <- high$fPAR_mean\nx <- high$clumping.index_mean\n\nplot(x, y)\n\nx.label <- \"VAI\"\ny.label <- \"fPAR\"\n\n# \ndf <- data.frame(x, y)\n# \n# #################\n#model list\nlog.rt <- lm(log(y) ~ log(x))\n\nplot(log(x), log(y))\n\n#### Michaelis Menten equation ### generating some data\n# building a Self Start object, finding the optimal values\nprint(getInitial(y ~ SSmicmen(x, max(y), 1), data = df), digits = 3)  \n\nlinear.model        <- lm(y ~ x)\nrec.hyper           <- nls(y ~ (a * x) / (b + x), start = list(a = 1, b = 1))\nrec.hyper2          <- nls(y ~ a + ((b * x) / (c + x)), start = list(a = -1, b = 0.1, c = -1))\nsigmoidal.curve     <- nls(y ~ (1 / (1 + exp(-a * (x - b)))), start = list(a = 1, b = 1))\n#log.growth          <- nls(y ~ a / (1 + b * exp(-k * x)), start = list(a = 1, b = 1, k = 0.01) )\nlogarithmic         <- nls(y ~ a + (b * log(x)), start = list(a = 1, b = 1))\npower               <- nls(y ~ a * (x^b), start = list(a = 1, b = 1))\nlog                 <- lm(y ~ log(x))\n\n# \n# \n## Collates model list\nmodel.list <- list(linear.model, rec.hyper, rec.hyper2,  sigmoidal.curve, logarithmic, power, log)\n\n#names the model items\nnames(model.list) <- c(\"linear.model\",\"rectangular hyperbola\", \"rec hyper 2\",\"s curve\", \"logarithmic\", \"power\", \"log\")\n\n#### AIC and summary stats\n#AIC\nlapply(model.list, AIC)\nlapply(model.list, AICc)\nlapply(model.list, tidy)\n\n# List of R-squared values. Unadjusted.\nfor (name in names(model.list)) {\n  \n  #model Name\n  \n  #R squared\n  RSS <- sum(residuals(model.list[[name]])^2)\n  TSS <- sum((y - mean(y))^2)\n  r2 = 1 - (RSS/TSS)\n  print(name)\n  print(r2)\n}\n",
    "created" : 1515783150086.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3531333864",
    "id" : "B0A270A7",
    "lastKnownWriteTime" : 1515789224,
    "last_content_update" : 1515789224907,
    "path" : "C:/github/neon_csc_project/03_high_light_plot_model_runs.R",
    "project_path" : "03_high_light_plot_model_runs.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}